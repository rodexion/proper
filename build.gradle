/*
 * Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.2'
  }
}

apply plugin: 'java'
apply plugin: 'idea-utils'
apply plugin: 'maven'

group = "io.github.rodexion"
version = "0.1"
archivesBaseName = "proper"

repositories {
  mavenCentral()
}

configurations {
  provided
}

dependencies {
  provided 'org.projectlombok:lombok:0.12.0'

  compile 'org.reflections:reflections:0.9.9-RC1'

  testCompile 'junit:junit:4.11'
  testCompile 'org.easytesting:fest-assert-core:2.0M10'
}

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets {
  main {
    compileClasspath += configurations.provided
  }
  test {
    compileClasspath += configurations.provided
  }
}

test {
  include 'com/github/rodexion/proper/AllTests.class'
}

def srcDelomboked = 'build/src-delomboked'

task delombok {
  // delombok task may depend on other projects already being compiled
  dependsOn configurations.compile.getTaskDependencyFromProjectDependency(true, "compileJava")

  def srcJava = 'src/main/java'

  // Set up incremental build, must be made in the configuration phase (not doLast)
  inputs.files file(srcJava)
  outputs.dir file(srcDelomboked)

  doLast {
    def cp = configurations.compile + configurations.provided
    def collection = files(cp)
    def sumTree = collection + fileTree(dir: 'bin')

    ant.taskdef(name: 'delombok', classname: 'lombok.delombok.ant.DelombokTask', classpath: cp.asPath)
    ant.delombok(from: srcJava, to: srcDelomboked, classpath: sumTree.asPath)
  }
}

javadoc.source = file(srcDelomboked)
javadoc.dependsOn delombok
javadoc.classpath += configurations.provided

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: project.releaseRepoUrl)
      snapshotRepository(url: project.snapshotRepoUrl)
      pom.project {
        artifactId = project.archivesBaseName
        name 'proper'
        inceptionYear '2013'
        packaging 'jar'
        description 'Utility for acquiring, validating and managing java system properties'
        url 'https://github.com/rodexion/proper'

        scm {
          url 'scm:git@github.com:rodexion/proper.git'
          connection 'scm:git@github.com:rodexion/proper.git'
          developerConnection 'scm:git@github.com:rodexion/proper.git'
        }

        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'rodexion'
            name 'Rodion Moiseev'
            email 'rodion.moiseev+github@gmail.com'
          }
        }
      }
    }
  }
}


idea {
  project {
    vcs {
      vcs = 'Git'
      directory = '$PROJECT_DIR$'
    }
    copyright {
      name = 'Apache 2.0'
      license = file("license-preamble.txt")
    }
  }
  module {
    scopes.PROVIDED.plus += configurations.provided
  }
}
